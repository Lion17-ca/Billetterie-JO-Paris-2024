version: '3.8'

services:
  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    image: ${DOCKERHUB_USERNAME}/jo-auth:latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - MFA_SECRET=${MFA_SECRET}
      - ENVIRONMENT=production
      - LOG_LEVEL=warning
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  tickets:
    image: ${DOCKERHUB_USERNAME}/jo-tickets:latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://auth:8000
      - ENVIRONMENT=production
      - LOG_LEVEL=warning
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  admin:
    image: ${DOCKERHUB_USERNAME}/jo-admin:latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://auth:8000
      - TICKETS_SERVICE_URL=http://tickets:8000
      - ENVIRONMENT=production
      - LOG_LEVEL=warning
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  validation:
    image: ${DOCKERHUB_USERNAME}/jo-validation:latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://auth:8000
      - TICKETS_SERVICE_URL=http://tickets:8000
      - ENVIRONMENT=production
      - LOG_LEVEL=warning
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  api-gateway:
    image: nginx:alpine
    restart: always
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./api-gateway/ssl:/etc/nginx/ssl:ro
    depends_on:
      - auth
      - tickets
      - admin
      - validation
    networks:
      - backend-network
      - frontend-network

  frontend:
    image: ${DOCKERHUB_USERNAME}/jo-frontend:latest
    build:
      context: ./frontend
      args:
        - REACT_APP_API_URL=https://${DOMAIN_NAME}/api
        - NODE_ENV=production
    restart: always
    ports:
      - "3000:80"
    networks:
      - frontend-network
    depends_on:
      - api-gateway
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
